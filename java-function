/* Write a function that, given a sentence, along with the position of an opening parenthesis, finds the corresponding closing parenthesis.
Example: if the example string "(like this (and this))" is input with the number 11 (position of the first parenthesis), 
the output should be 20 (position of the last parenthesis).
*/

import org.junit.Test;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

import static org.junit.Assert.*;

public class Solution {

    public static int getClosingParen(String sentence, int openingParenIndex) {

        // return -1 for invalid inputs.
        if (sentence.length() == 0 ) return -1;
        if (openingParenIndex < 0 || openingParenIndex >= sentence.length()) return -1;
        if (sentence.charAt(openingParenIndex) != '(') return -1;
        
        // find the position of the matching closing parenthesis.
        int openNestedParens = 0;
        
        for (int position = openingParenIndex; position < sentence.length(); position++ ) {
            char c = sentence.charAt(position);
            
            if (c == '(') {
                openNestedParens++;
            }
            else if (c == ')') {
                    openNestedParens--;
                    if (openNestedParens == 0) {
                      return position;
                    } 
                
            }
        }
        return -1;
    }


    // tests

    @Test
    public void allOpenersThenClosersTest() {
        final int expected = 7;
        final int actual = getClosingParen("((((()))))", 2);
        assertEquals(expected, actual);
    }

    @Test
    public void mixedOpenersAndClosersTest() {
        final int expected = 10;
        final int actual = getClosingParen("()()((()()))", 5);
        assertEquals(expected, actual);
    }

    @Test
    public void noMatchingCloserTest() {
        final int expected = -1;
        final int actual = getClosingParen("()(()", 2);
        assertEquals(expected, actual);
    }
    
    @Test
    public void notValidInputParenIndexTest() {
        final int expected = -1;
        final int actual = getClosingParen("(a)(()", 1);
        assertEquals(expected, actual);
    }
    
    @Test
    public void emptyInputStringTest() {
        final int expected = -1;
        final int actual = getClosingParen("", 1);
        assertEquals(expected, actual);
    }

    public static void main(String[] args) {
        Result result = JUnitCore.runClasses(Solution.class);
        for (Failure failure : result.getFailures()) {
            System.out.println(failure.toString());
        }
        if (result.wasSuccessful()) {
            System.out.println("All tests passed.");
        }
    }
}
